apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "postgresql-single.fullname" . }}
  labels:
    {{- include "postgresql-single.labels" . | nindent 4 }}
    {{- with .Values.podlabels }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
spec:
  serviceName: {{ include "postgresql-single.fullname" . }}-headless
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  podManagementPolicy: Parallel
  updateStrategy:
    type: {{ .Values.updateStrategy.type }}
  selector:
    matchLabels:
      {{- include "postgresql-single.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.metrics.enabled }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
      {{- end}}
      labels:
        {{- include "postgresql-single.selectorLabels" . | nindent 8 }}
        {{- with .Values.podlabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      enableServiceLinks: false
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
      {{- end }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "postgresql-single.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- if .Values.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- end }}
      {{- with .Values.initContainers }}
      initContainers:
        {{- range $key := . }}
        - name: {{ default "init" $key.name }}
          image: {{ default (printf "%s:%s" $.Values.image.repository (default $.Chart.AppVersion $.Values.image.tag)) $key.image }}
          {{- tpl (toYaml (mergeOverwrite (omit $key "name" "image") (dict "securityContext" $.Values.securityContext))) $ | nindent 10 }}
        {{- end }}
      {{- end }}
      containers:
        - name: {{ template "postgresql-single.fullname" . }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if .Values.command }}
          command: {{- toYaml .Values.command | nindent 12 }}
          {{- end }}
          args:
            - postgres
            - -c
            - config_file=/postgresql/conf/postgresql.conf
          {{- if .Values.pgHbaConfiguration }}
            - -c
            - hba_file=/postgresql/conf/pg_hba.conf
          {{- end }}
          env:
            - name: POSTGRES_INITDB_ARGS
              value: {{ .Values.initdb.args | quote }}
            - name: POSTGRES_USER
              value: {{ .Values.postgresqlUsername | quote }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "postgresql-single.fullname" . }}
                  key: postgresqlPassword
            - name: PGAPPNAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: PGUSER
              value: {{ .Values.postgresqlUsername | quote }}
            - name: PGSSLMODE
              value: {{ .Values.tlsCerts.mode | quote }}
            {{- if hasPrefix "verify" .Values.tlsCerts.mode }}
            - name: PGSSLROOTCERT
              value: /etc/ssl/tlscerts/ca.crt
            {{- end }}
            - name: PGSSLCERT
              value: /etc/ssl/tlscerts/tls.crt
            - name: PGSSLKEY
              value: /etc/ssl/tlscerts/tls.key
            - name: PGDATA
              value: {{ .Values.persistence.mountPath }}/data
          ports:
            - name: postgresql
              containerPort: 5432
              protocol: TCP
          volumeMounts:
            - name: data
              mountPath: {{ .Values.persistence.mountPath }}
            - name: dshm
              mountPath: /dev/shm
            - name: postgresql-config
              mountPath: /postgresql/conf
          {{- if .Values.extraVolumeMounts }}
            {{- toYaml .Values.extraVolumeMounts | nindent 12 }}
          {{- end }}
          {{- if or .Values.backup.enabled .Values.backup.recovery }}
            - name: config
              mountPath: /etc/walg
          {{- if .Values.backup.recovery }}
            - name: recovery
              mountPath: /docker-entrypoint-initdb.d
          {{- end }}{{- end }}
          {{- if and .Values.initdb.script (not .Values.backup.recovery) }}
            - name: initdb
              mountPath: /docker-entrypoint-initdb.d
          {{- end }}
            - name: tlscerts
              mountPath: /etc/ssl/tlscerts
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- if .Values.metrics.enabled }}
        - name: metrics
          securityContext:
            seccompProfile:
              type: RuntimeDefault
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["ALL"]
          image: "{{ .Values.metrics.image.repository }}:{{ .Values.metrics.image.tag }}"
          imagePullPolicy: {{ .Values.metrics.image.pullPolicy | quote }}
          env:
            - name: PGAPPNAME
              value: metrics
            - name: DATA_SOURCE_URI
              value: {{ template "postgresql-single.data_source_uri" . }}
            - name: DATA_SOURCE_USER
              value: {{ .Values.metrics.username }}
            - name: DATA_SOURCE_PASS_FILE
              value: /etc/pg/.pgpass
            - name: PG_EXPORTER_EXTEND_QUERY_PATH
              value: /etc/exporter/queries.yaml
          volumeMounts:
            - name: postgresql-config
              mountPath: /etc/exporter/queries.yaml
              subPath: queries.yaml
            - name: pgpass
              mountPath: /etc/pg
          ports:
            - name: metrics
              containerPort: 9187
          resources:
            {{- toYaml .Values.metrics.resources | nindent 12 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels: {{- (include "postgresql-single.selectorLabels" .) | nindent 18 }}
              namespaces:
                - {{ .Release.Namespace | quote }}
              topologyKey: kubernetes.io/hostname
      {{- with .Values.affinity }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
        - name: postgresql-config
          configMap:
            name: {{ include "postgresql-single.fullname" . }}
      {{- if .Values.extraVolumes }}
        {{- toYaml .Values.extraVolumes | nindent 8 }}
      {{- end }}
      {{- if or .Values.backup.enabled .Values.backup.recovery }}
        - name: config
          secret:
            secretName:  {{ include "postgresql-single.fullname" . }}
            defaultMode: 256
            items:
              - key: walg.yaml
                path: walg.yaml
        - name: recovery
          configMap:
            name: {{ include "postgresql-single.fullname" . }}
            defaultMode: 493
            items:
              - key: restore.sh
                path: restore.sh
      {{- end }}
      {{- if and .Values.initdb.script }}
        - name: initdb
          configMap:
            name: {{ include "postgresql-single.fullname" . }}
            defaultMode: 493
            items:
              - key: initdb.sh
                path: initdb.sh
      {{- end }}
        - name: tlscerts
          secret:
            secretName: {{ include "postgresql-single.fullname" . }}-server-tls
            defaultMode: 256
      {{- if .Values.metrics.enabled }}
        - name: pgpass
          secret:
            secretName: {{ include "postgresql-single.fullname" . }}
            items:
              - key: postgresqlPassword
                path: .pgpass
            defaultMode: 256
      {{- end }}
{{- if not .Values.persistence.enabled }}
        - name: data
          emptyDir: {}
{{- else if .Values.persistence.existingClaim }}
        - name: data
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim }}
{{- else if not .Values.persistence.existingClaim }}
  volumeClaimTemplates:
    - metadata:
        name: data
      {{- with .Values.persistence.annotations }}
        annotations:
        {{- range $key, $value := . }}
          {{ $key }}: {{ $value }}
        {{- end }}
      {{- end }}
      spec:
        accessModes:
        {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
      {{- if .Values.persistence.storageClass }}
      {{- if (eq "-" .Values.persistence.storageClass) }}
        storageClassName: ""
      {{- else }}
        storageClassName: "{{ .Values.persistence.storageClass }}"
      {{- end }}
      {{- end }}
{{- end }}
