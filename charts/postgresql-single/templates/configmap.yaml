apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "postgresql-single.fullname" . }}
  labels:
    {{- include "postgresql-single.labels" . | nindent 4 }}
data:
  postgresql.conf: |
    {{- include "postgresql-single.postgresqlConfiguration" . | nindent 4 }}
    {{- include "postgresql-single.postgresqlConfigurationLogs" . | nindent 4 }}

  {{- if gt (int .Values.postgresqlServerMemory) (int "511") }}

    # auto generated
    work_mem = {{ div .Values.postgresqlServerMemory 32 }}MB
    maintenance_work_mem = {{ div .Values.postgresqlServerMemory 4 }}MB
    effective_cache_size = {{ div .Values.postgresqlServerMemory 2 }}MB
    {{- if and .Values.resources.requests (hasKey .Values.resources.requests "hugepages-1Gi") }}
    {{- $pages := int (regexFind "[0-9]+" (get .Values.resources.requests "hugepages-1Gi")) }}
    shared_buffers = {{ sub $pages 1 }}GB
    huge_pages = try
    {{- else if and .Values.resources.requests (hasKey .Values.resources.requests "hugepages-2Mi") }}
    {{- $pages := int (include "resource-megabytes" (get .Values.resources.requests "hugepages-2Mi")) }}
    shared_buffers = {{ sub $pages 800 }}MB
    huge_pages = try
    {{- else }}
    shared_buffers = {{ div .Values.postgresqlServerMemory 4 }}MB
    huge_pages = off
    {{- end }}
  {{- end }}

  {{- if .Values.postgresqlConfigurationExtra }}
    {{- .Values.postgresqlConfigurationExtra | nindent 4 }}
  {{- end }}

    include_if_exists '{{ .Values.persistence.mountPath }}/postgresql-local.conf'

  pg_hba.conf: |
    {{- .Values.pgHbaConfiguration | nindent 4 }}

  rsyncd.conf: |
    port = 1873
    log file = /dev/stdout
    reverse lookup = no
    use chroot = no

    [database]
    path = {{ .Values.persistence.mountPath }}/data
    comment = Postgres Database
    read only = true
    timeout = 300

  metrics.yaml: |
    auth_modules:
      localhost:
        type: userpass
        userpass:
          username: {{ .Values.metrics.username }}
        options:
          sslmode: allow

  queries.yaml: |
    {{- tpl .Values.metrics.queries . | nindent 4 }}

  metrics.sql: |
    CREATE EXTENSION pg_stat_statements;

  {{ if .Values.initdb.script }}
  initdb.sh: |
    {{- .Values.initdb.script | nindent 4 }}
  {{- end }}

  migrate.sh: |
    #!/bin/sh
    set -e

    migrate_err() {
        [ $? -eq 0 ] && exit 0

        echo "*** ERROR, needs manual fixes, waiting"
        /pause
    }

    trap migrate_err EXIT

    cd {{ .Values.persistence.mountPath }}

    PG_MAJOR_OLD=`expr $PG_MAJOR - 1`
    [ -d /usr/lib/postgresql/$PG_MAJOR/bin ] || (echo "*** Postgres binary do not found ($PG_MAJOR)"; exit 1)
    [ -d /usr/lib/postgresql/$PG_MAJOR_OLD/bin ] || (echo "*** Postgres binary do not found ($PG_MAJOR_OLD)"; exit 1)

    [ "`cat {{ .Values.persistence.mountPath }}/data/PG_VERSION`" = "$PG_MAJOR" ] && (echo "*** Postgres already migrated"; exit 1)
    [ "`cat {{ .Values.persistence.mountPath }}/data/PG_VERSION`" = "$PG_MAJOR_OLD" ] || (echo "*** Do not support database version"; exit 1)
    [ -f {{ .Values.persistence.mountPath }}/data/standby.signal ] && (echo "*** Database in recovery mode, use rsync -av --delete --exclude=postgresql.auto.conf --exlude='*.signal' rsync://{{ include "postgresql-single.fullname" . }}-0.{{ include "postgresql-single.fullname" . }}-headless:1873/database/ {{ .Values.persistence.mountPath }}/data/"; exit 1)

    echo "*** Start migration"

    mv /database/data /database/data.old
    rm -f /database/data.old/recovery.conf /database/data.old/recovery.done /database/data.old/recovery.signal
    rm -f /database/data.old/backup_label.old

    /usr/lib/postgresql/$PG_MAJOR/bin/initdb --auth-local=trust --locale=en_US.UTF-8 $POSTGRES_INITDB_ARGS /database/data

    cp /postgresql/conf/postgresql.conf /database/data.old/postgresql.conf
    sed -i '/archive_command/d' /database/data.old/postgresql.conf
    sed -i '/restore_command/d' /database/data.old/postgresql.conf
    sed -i '/hot_standby/d' /database/data.old/postgresql.conf

    pg_upgrade --old-bindir /usr/lib/postgresql/$PG_MAJOR_OLD/bin --new-bindir /usr/lib/postgresql/$PG_MAJOR/bin --old-datadir /database/data.old --new-datadir /database/data --check
    pg_upgrade --old-bindir /usr/lib/postgresql/$PG_MAJOR_OLD/bin --new-bindir /usr/lib/postgresql/$PG_MAJOR/bin --old-datadir /database/data.old --new-datadir /database/data --link

    /usr/lib/postgresql/$PG_MAJOR/bin/postgres -c config_file=/postgresql/conf/postgresql.conf -c listen_addresses='' -c archive_mode=off -c fsync=off &

    TRIES=30
    while [ "$TRIES" != "0" ]
    do
        echo "* Trying to connect... #$TRIES"
        psql -U postgres postgres -tAc "SELECT 1;" >/dev/null 2>/dev/null && break || sleep 5 && TRIES=`expr "$TRIES" - 1`
    done

    [ -f update_extensions.sql ] && psql --file=update_extensions.sql -U postgres postgres ||:
    [ -f analyze_new_cluster.sh ] && sh analyze_new_cluster.sh || /usr/lib/postgresql/$PG_MAJOR/bin/vacuumdb --all --analyze-in-stages -j 4
    [ -f delete_old_cluster.sh  ] && sh delete_old_cluster.sh
    rm -f analyze_new_cluster.sh delete_old_cluster.sh update_extensions.sql

    /usr/lib/postgresql/$PG_MAJOR/bin/pg_ctl -s stop

    echo "*** Finish migration"
    echo "*** if needed, run it: rsync --no-detach --daemon --config /postgresql/conf/rsyncd.conf"

  vacuum-all.sh: |
    #!/bin/sh
    set -e

    # vacuumdb --all -j 8 -P 8
    vacuumdb -avf

{{- if or .Values.backup.enabled .Values.backup.recovery }}
  rewind.sh: |
    #!/bin/sh
    set -e

    pg_rewind -D {{ .Values.persistence.mountPath }}/data --source-server="host={{ include "postgresql-single.fullname" . }}-0.{{ include "postgresql-single.fullname" . }}-headless sslmode=require user={{ .Values.postgresqlUsername }} password=$POSTGRES_PASSWORD"

  backup.sh: |
    #!/bin/sh
    set -e

    {{- if eq .Values.backup.podAffinityPreset "hard" }}
    /usr/bin/wal-g --config /etc/walg/walg.yaml backup-push {{ .Values.persistence.mountPath }}/data
    {{- else }}
    /usr/bin/wal-g --config /etc/walg/walg.yaml backup-push
    {{- end }}
    /usr/bin/wal-g --config /etc/walg/walg.yaml backup-list --pretty --detail
    /usr/bin/wal-g --config /etc/walg/walg.yaml wal-show ||:
    /usr/bin/wal-g --config /etc/walg/walg.yaml wal-verify timeline
    /usr/bin/wal-g --config /etc/walg/walg.yaml wal-verify integrity ||:
    {{- if .Values.backup.cleanPolicy }}
    /usr/bin/wal-g --config /etc/walg/walg.yaml delete {{ .Values.backup.cleanPolicy }} --confirm ||:
    {{- end }}

  restore.sh: |
    #!/bin/sh
    set -e

    [ -z "$VERSION" ] && export VERSION=LATEST

    echo "*** Star recovery from wal-g backup ($VERSION)"
    start=`date +%s`
    pg_ctl -D "$PGDATA" -m fast -w stop >/dev/null 2>/dev/null ||:

    rm -rf {{ .Values.persistence.mountPath }}/data

    touch {{ .Values.persistence.mountPath }}/postgresql-local.conf
    mkdir -p {{ .Values.persistence.mountPath }}/data
    /usr/bin/wal-g --config /etc/walg/walg.yaml backup-fetch {{ .Values.persistence.mountPath }}/data $VERSION

    echo "# bootstrap addons" > $PGDATA/postgresql.auto.conf
    echo "archive_command = '/bin/true'" >> $PGDATA/postgresql.auto.conf

    if [ "$HOSTNAME" != "{{ include "postgresql-single.fullname" . }}-0" ]; then
        # https://www.postgresql.org/docs/current/libpq-connect.html

        echo "primary_conninfo = 'host={{ include "postgresql-single.fullname" . }}-0.{{ include "postgresql-single.fullname" . }}-headless.{{ .Release.Namespace }}.svc sslmode=verify-full sslrootcert=/etc/ssl/tlscerts/ca.crt user={{ .Values.postgresqlUsername }} password=$POSTGRES_PASSWORD'" >> $PGDATA/postgresql.auto.conf
        touch {{ .Values.persistence.mountPath }}/data/standby.signal
        touch {{ .Values.persistence.mountPath }}/data/recovery.signal
    else
        {{- if .Values.postgresqlConninfo }}
        echo "primary_conninfo = '{{ tpl .Values.postgresqlConninfo . }}'" >> $PGDATA/postgresql.auto.conf
        touch {{ .Values.persistence.mountPath }}/data/standby.signal
        {{- end }}
        touch {{ .Values.persistence.mountPath }}/data/recovery.signal
    fi

    touch {{ .Values.persistence.mountPath }}/postgresql-local.conf
    touch {{ .Values.persistence.mountPath }}/data/recovery.signal
    chmod 0700 {{ .Values.persistence.mountPath }}/data

    pg_ctl -D "$PGDATA" -o "--config-file=/postgresql/conf/postgresql.conf" -o "-c listen_addresses=''" -o "-c archive_mode=off" -w start
    sleep 10

    TRIES=30
    while [ "$TRIES" != "0" ]
    do
        echo "* Trying to connect... #$TRIES"
        psql -U postgres postgres -tAc "SELECT pg_is_in_recovery();" >/dev/null 2>/dev/null && break || sleep 60 && TRIES=`expr "$TRIES" - 1`
    done

    end=`date +%s`
    runtime=$((end-start))
    echo "*** Recovery time - ${runtime}s"

  postgresql-checker.conf: |
    work_mem = {{ div (include "resource-megabytes" .Values.backupCheck.resources.requests.memory) 8 }}MB
    maintenance_work_mem = {{ div (include "resource-megabytes" .Values.backupCheck.resources.requests.memory) 4 }}MB
    shared_buffers = {{ div (include "resource-megabytes" .Values.backupCheck.resources.requests.memory) 8 }}MB
    huge_pages = off

    fsync = off
    log_min_duration_statement = -1

  restore-checker.sh: |
    #!/bin/sh -e
    set -e

    export VERSION=LATEST

    echo "*** Start recovery from wal-g backup ($VERSION)"
    START=`date +%s`

    trap 'rm -rf {{ .Values.persistence.mountPath }}/data; exit 1' 9 15

    rm -rf {{ .Values.persistence.mountPath }}/data

    touch {{ .Values.persistence.mountPath }}/postgresql-local.conf
    mkdir -p {{ .Values.persistence.mountPath }}/data
    /usr/bin/wal-g --config /etc/walg/walg.yaml backup-fetch {{ .Values.persistence.mountPath }}/data $VERSION

    echo "# bootstrap addons" > $PGDATA/postgresql.auto.conf
    echo "archive_command = '/bin/true'"                                                   >> $PGDATA/postgresql.auto.conf
    echo "restore_command = '/usr/bin/wal-g --config /etc/walg/walg.yaml wal-fetch %f %p'" >> $PGDATA/postgresql.auto.conf

    cp /postgresql/conf/postgresql-checker.conf {{ .Values.persistence.mountPath }}/postgresql-local.conf
    touch {{ .Values.persistence.mountPath }}/data/recovery.signal
    chmod 0700 {{ .Values.persistence.mountPath }}/data

    pg_ctl -D "$PGDATA" -o "--config-file=/postgresql/conf/postgresql.conf" -o "-c listen_addresses=''" -o "-c archive_mode=off" -w start
    sleep 60

    TRIES=30
    while [ "$TRIES" != "0" ]
    do
        echo "* Trying to connect... #$TRIES"
        psql -U postgres postgres -tAc "SELECT pg_is_in_recovery();" >/dev/null 2>/dev/null && break || sleep 60 && TRIES=`expr "$TRIES" - 1`
    done
    pg_ctl -D "$PGDATA" -w -t 600 promote ||:

    END=`date +%s`
    RUNTIME=`expr $END - $START`
    echo "*** Recovery time - ${RUNTIME}s"

    echo "*** Size: `du -hs {{ .Values.persistence.mountPath }}/data`"
    psql -U postgres postgres -c "SELECT pg_database.datname,pg_size_pretty(pg_database_size(pg_database.datname)) AS size FROM pg_database ORDER BY datname;"

    echo "*** Start tests"
    START=`date +%s`

    {{- if and (regexMatch "^[0-9]+\\.[0-9]+$" .Values.image.tag) (semverCompare ">=14.0" .Values.image.tag) | default .Chart.AppVersion }}
    echo "*** AMCheck"
    pg_amcheck -a --install-missing --parent-check --heapallindexed
    {{- end }}
    echo "*** PGDump"
    pg_dumpall -U postgres >/dev/null
    echo "*** Passed"

    sleep 5
    pg_ctl -D "$PGDATA" -t 60 -w stop 2>/dev/null ||:

    END=`date +%s`
    RUNTIME=`expr $END - $START`
    echo "*** Tests time - ${RUNTIME}s"

    {{- if .Values.backupCheck.persistence.existingClaim }}
    rm -rf {{ .Values.persistence.mountPath }}/data 2>/dev/null ||:
    {{- end }}
{{- end }}
