apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "clickhouse.fullname" . }}
  labels:
    {{- include "clickhouse.labels" . | nindent 4 }}
data:
  {{- $mem := include "resource-bytes" (default (default (dict) .Values.resources.limits ).memory .Values.resources.requests.memory) }}
  {{- $memHalf := int64 (div (sub (int64 $mem) 1000000000) 2) }}
  users.xml: |-
    <clickhouse>
        <profiles>
            <default>
                <max_memory_usage>10000000000</max_memory_usage>
                <use_uncompressed_cache>0</use_uncompressed_cache>
                <load_balancing>random</load_balancing>
                <query_profiler_real_time_period_ns>0</query_profiler_real_time_period_ns>
                <query_profiler_cpu_time_period_ns>0</query_profiler_cpu_time_period_ns>
                {{- if lt $memHalf 1000000000 }}
                <max_bytes_before_external_group_by>0</max_bytes_before_external_group_by>
                <max_bytes_before_external_sort>0</max_bytes_before_external_sort>
                {{- else }}
                <max_bytes_before_external_group_by>{{ $memHalf }}</max_bytes_before_external_group_by>
                <max_bytes_before_external_sort>{{ $memHalf }}</max_bytes_before_external_sort>
                {{- end }}
                {{- if le (div $mem 1000000000) 4 }}
                <max_download_threads>1</max_download_threads>
                {{- end }}
            </default>
            <reader>
                <max_memory_usage>10000000000</max_memory_usage>
                <use_uncompressed_cache>0</use_uncompressed_cache>
                <load_balancing>random</load_balancing>
                <query_profiler_real_time_period_ns>0</query_profiler_real_time_period_ns>
                <query_profiler_cpu_time_period_ns>0</query_profiler_cpu_time_period_ns>
                {{- if lt $memHalf 1000000000 }}
                <max_bytes_before_external_group_by>0</max_bytes_before_external_group_by>
                <max_bytes_before_external_sort>0</max_bytes_before_external_sort>
                {{- else }}
                <max_bytes_before_external_group_by>{{ $memHalf }}</max_bytes_before_external_group_by>
                <max_bytes_before_external_sort>{{ $memHalf }}</max_bytes_before_external_sort>
                {{- end }}
                {{- if le (div $mem 1000000000) 4 }}
                <max_download_threads>1</max_download_threads>
                {{- end }}
                <readonly>2</readonly>
            </reader>
        </profiles>
        <quotas>
            <default>
                <interval>
                    <duration>3600</duration>
                    <queries>0</queries>
                    <errors>0</errors>
                    <result_rows>0</result_rows>
                    <read_rows>0</read_rows>
                    <execution_time>0</execution_time>
                </interval>
            </default>
        </quotas>
        <users replace="replace">
        {{- if .Values.clickhouse.accessManagement }}
            <default>
                <password></password>
                <profile>default</profile>
                <quota>default</quota>
                <networks>
                    <ip>::1</ip>
                    <ip>127.0.0.1</ip>
                </networks>
                <access_management>1</access_management>
                <named_collection_control>1</named_collection_control>
                <show_named_collections>1</show_named_collections>
                <show_named_collections_secrets>1</show_named_collections_secrets>
            </default>
        {{- end }}
        {{- if .Values.backup.enabled }}
            <backup>
                <password_sha256_hex>{{ include "clickhouse.backupPassword" . | sha256sum }}</password_sha256_hex>
                <profile>default</profile>
                <quota>default</quota>
                <networks>
                    <ip>::/0</ip>
                    <ip>0.0.0.0/0</ip>
                </networks>
            </backup>
        {{- end }}
        {{- range .Values.clickhouse.users }}
            <{{ .name }}>
                {{- if .password_plain }}
                <password>{{ .password_plain }}</password>
                {{- end }}
                {{- if .password }}
                <password_sha256_hex>{{ .password }}</password_sha256_hex>
                {{- end }}
                <profile>{{ .profile | default "default" }}</profile>
                <quota>{{ .quota | default "default" }}</quota>
                <networks>
                    <ip>::/0</ip>
                    <ip>0.0.0.0/0</ip>
                </networks>
                {{- if and $.Values.clickhouse.accessManagement (not .accessManagement) }}
                <access_management>1</access_management>
                <named_collection_control>1</named_collection_control>
                <show_named_collections>1</show_named_collections>
                {{- end }}
            </{{ .name }}>
        {{- end }}
        </users>
    </clickhouse>

  config.xml: |-
    <clickhouse>
        <display_name>{{ include "clickhouse.fullname" . }}</display_name>
        {{- if has "IPv6" .Values.service.ipFamilies }}
        <listen_host>::</listen_host>
        {{- else }}
        <listen_host>0.0.0.0</listen_host>
        {{- end }}
        <listen_try>1</listen_try>

        <http_port>8123</http_port>
        <tcp_port>9000</tcp_port>

        {{- if .Values.tlsCerts.create }}
        <https_port>8443</https_port>
        <tcp_port_secure>9440</tcp_port_secure>
        <!--
        <interserver_http_port></interserver_http_port>
        <interserver_https_port>9010</interserver_https_port>
        -->
        {{- end }}

        <mysql_port></mysql_port>
        <postgresql_port>5432</postgresql_port>

        {{- if .Values.tlsCerts.create }}
        <openSSL>
            <server>
                <caConfig>/etc/ssl/tlscerts/ca.crt</caConfig>
                <certificateFile>/etc/ssl/tlscerts/tls.crt</certificateFile>
                <privateKeyFile>/etc/ssl/tlscerts/tls.key</privateKeyFile>
                <verificationMode>none</verificationMode>
                <cacheSessions>true</cacheSessions>
                <disableProtocols>sslv2,sslv3</disableProtocols>
                <preferServerCiphers>true</preferServerCiphers>
            </server>
            <client>
                <loadDefaultCAFile>true</loadDefaultCAFile>
                <caConfig>/etc/ssl/tlscerts/ca.crt</caConfig>
                <cacheSessions>true</cacheSessions>
                <disableProtocols>sslv2,sslv3</disableProtocols>
                <preferServerCiphers>true</preferServerCiphers>
                <verificationMode>relaxed</verificationMode>
                <invalidCertificateHandler>
                    <name>RejectCertificateHandler</name>
                </invalidCertificateHandler>
            </client>
        </openSSL>
        {{- end }}

        {{- if .Values.metrics.enabled }}
        <prometheus>
            <endpoint>/metrics</endpoint>
            <port>9363</port>
            <metrics>true</metrics>
            <events>true</events>
            <asynchronous_metrics>false</asynchronous_metrics>
            <status_info>true</status_info>
        </prometheus>
        {{- end }}
    </clickhouse>

  logger.xml: |-
    <clickhouse>
        {{- include "clickhouse.logger" . | nindent 8 }}
    </clickhouse>

  optimization.xml: |-
    <clickhouse>
        {{- include "clickhouse.optimization" . | nindent 8 }}
    </clickhouse>

  storage.xml: |-
    <clickhouse>
        {{- include "clickhouse.storage" . | nindent 8 }}
    </clickhouse>

  backups.xml: |-
    <clickhouse>
        {{- if and .Values.storage.disks (ne (len .Values.storage.disks) 0) }}
        <backups>
            {{- range $key, $val := .Values.storage.disks }}{{ if $val.backup }}
            <allowed_disk>{{ $key }}</allowed_disk>
            {{- end }}{{- end }}
            <allowed_path>/backups/</allowed_path>
        </backups>
        {{- end }}
    </clickhouse>

  collections.xml: |-
    <clickhouse>
        <named_collections>
        {{- range $key, $val := .Values.clickhouse.collections }}
            <{{ $val.name }}>
                {{- range $k, $v := $val }}
                {{- if not (has $k (list "name")) }}
                <{{ $k }}>{{ $v }}</{{ $k }}>
                {{- end }}
                {{- end }}
            </{{ $val.name }}>
        {{- end }}
        </named_collections>
    </clickhouse>

  dictionaries.xml: |-
    <dictionaries>
    </dictionaries>

  {{- if or .Values.backup.enabled .Values.backupCheck.enabled }}
  clickhouse-backup.yaml: |-
    general:
      log_level: warning
      retries_on_failure: 3
      retries_pause: 60s
      #   download_concurrency: 2
      #   upload_concurrency: 4
      #   max_file_size:  2147483648
      upload_by_part: true
      #
      backups_to_keep_local: 2
      backups_to_keep_remote: 14
      allow_empty_backups: false
    clickhouse:
      username: backup
      port: 9000
    {{- if .Values.backup.config }}
    {{- toYaml .Values.backup.config | nindent 4 }}
    {{- end }}

  clickhouse-backup-check.sh: |-
    #!/bin/sh -e
    set -e

    TRIES=30
    while [ "$TRIES" != "0" ]
    do
        echo "*** Trying to connect... #$TRIES"
        clickhouse-backup tables >/dev/null 2>/dev/null && break || sleep 60 && TRIES=`expr "$TRIES" - 1`
    done

    echo "*** Start recovery from remote backup"
    START=`date +%s`

    export LOG_LEVEL=warning
    VERSION=`clickhouse-backup list remote 2>/dev/null | tail -n 1 | awk '{print $1}'`
    if [ $? -ne 0 ]; then
      echo "No remote backups found"
      exit 1
    fi

    echo "*** Latest remote backup: $VERSION"
    echo "***"

    export LOG_LEVEL=info
    clickhouse-backup restore_remote $VERSION

    END=`date +%s`
    RUNTIME=`expr $END - $START`
    echo "***"
    echo "*** Recovery time - ${RUNTIME}s"
    echo "*** Size: `du -hs /var/lib/clickhouse`"
  {{- end }}

{{ range $key, $val := .Values.cronjobs }}
  command-{{ $key }}: |-
    {{- default "exit 1" $val.command | nindent 4 }}
{{- end }}

{{- if .Values.clickhouse.customConfig }}
  {{- range $key, $value := .Values.clickhouse.customConfig }}
  {{ $key }}: |-
    {{- $value | nindent 4 }}
  {{- end }}
{{- end }}
